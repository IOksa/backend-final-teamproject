{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "GooseTrack API",
    "description": "The API for the GooseTrack project",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    {
      "description": "GooseTrack Backend URL",
      "url": "https://backend-goosetrack.onrender.com"
      
      }
    
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User`s information endpoints"
    },
    {
      "name": "Tasks",
      "description": "Tasks endpoints"
    },
    {
      "name": "Reviews",
      "description": "Reviews endpoints"
    }
  ],



  "paths": {
    "/auth/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          }
        }
      }
    },


    "/reviews": {
      "get": {
        "tags": [
          "Reviews"
        ],
        "description": "Returns all reviews",
        "responses": {
          "200": {
            "description": "All the reviews",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reviews"
                }
              }
            }
          }
        }
      }
    },
    "/reviews/own": {
      "get": {
        "tags": [
          "Reviews"
        ],
        "description": "Returns user`s own review",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The JWT token issued to the current user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User`s own review",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reviews"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "post": {
        "tags": [
          "Reviews"
        ],
        "description": "Add user`s own review",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The JWT token issued to the current user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rating": {
                    "type": "integer",
                    "format": "int32",
                    "example": 5
                  },
                  "comment": {
                    "type": "string",
                    "example": "Good app!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User`s own review",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reviews"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "409": {
            "description": "User has already added a review."
          }
        }
      },
      "patch": {
        "tags": [
          "Reviews"
        ],
        "description": "Edit user`s own review",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The JWT token issued to the current user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rating": {
                    "type": "integer",
                    "format": "int32",
                    "example": 5
                  },
                  "comment": {
                    "type": "string",
                    "example": "Good app!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User`s own review",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reviews"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      },
      "delete": {
        "tags": [
          "Reviews"
        ],
        "description": "Delete user`s own review",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "The JWT token issued to the current user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review deleted"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          }
        }
      }
    }
  },


  
  "components": {
    "responses": {
      "UnauthorizedError": {
        "description": "Not authorized"
      },
      "NotFoundError": {
        "description": "User doesn`t have any review"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Reviews": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "_id": {
              "type": "string",
              "example": "651578edcb9480926aadc04f"
            },
            "rating": {
              "type": "integer",
              "format": "int32",
              "example": 5
            },
            "comment": {
              "type": "string",
              "example": "Good app!"
            },
            "name": {
              "type": "string",
              "example": "Nik"
            },
            "createdAt": {
              "type": "string",
              "format": "date-time"
            },
            "updatedAt": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      }
    }
  }
}